#!/usr/bin/env bash

################################################################################
# Cache resized images for a specific monitor width.
set -eu

################################################################################
option_width=
option_name_for=
option_default_image=
option_images=$HOME/.config/lock-screen
option_cache=$HOME/.cache/resized-images

################################################################################
usage() {
  cat <<EOF
Usage: $(basename "$0") [options]

  -b FILE Set defailt (backup) image
  -c DIR  Set the cache directory
  -d DIR  Directory containing images
  -h      This message
  -i FILE Get the cache name for a single image
  -w NUM  Manually set an image width

EOF
}

################################################################################
# Try to figure out the width of the primary monitor.
get_monitor_width() {
  xrandr |
    grep 'connected primary' |
    cut -d' ' -f4 |
    cut -dx -f1
}

################################################################################
# Calculate an image width using either the manually supplied width or
# one calculated from the primary monitor.
calc_image_width() {
  if [ -n "$option_width" ]; then
    echo "$option_width"
  else
    get_monitor_width || echo 1920
  fi
}

################################################################################
# Generate an image name that goes in the cache.
gen_cache_name() {
  local image=$1
  local width=$2
  local sum

  sum=$(sha256sum "$image" | cut -d' ' -f1)
  sum=$(echo "$sum" "$width" | sha256sum | cut -d' ' -f1)

  echo "$option_cache/$sum.png"
}

################################################################################
# Resize an image to fit the given width and cache it.
cache_file() {
  local image=$1
  local width=$2
  local cache

  cache=$(gen_cache_name "$image" "$width")

  if [ ! -e "$cache" ]; then
    mkdir -p "$(dirname "$cache")"

    convert \
      -define colorspace:auto-grayscale=false \
      -resize "$width" \
      "$image" "$cache"
  fi

  echo "$cache"
}

################################################################################
# Cache all of the images in a directory.  If the directory does not
# exist then cache the default image if one was given.
cache_directory() {
  local dir=$1
  local width
  local file

  width=$(calc_image_width)

  if [ -d "$dir" ]; then
    while IFS= read -r -d '' file; do
      cache_file "$file" "$width"
    done < <(find -L "$dir" \
      '(' -name '.*' -prune ')' -or \
      '(' -iregex '.*\(png\|jpg\)$' -print0 ')')
  elif [ -n "$option_default_image" ] && [ -e "$option_default_image" ]; then
    cache_file "$option_default_image" "$width"
  fi
}

################################################################################
watch_directory() {
  local dir=$1
  local parent
  local child

  if [ -d "$dir" ]; then
    # Watch for file changes:
    while inotifywait -e modify -e create -r "$dir"; do
      cache_directory "$dir"
    done
  else
    # Directory doesn't exist so wait for it to be created:
    parent=$dir
    child=$dir

    while [ ! -d "$parent" ] && [ "$(dirname "$parent")" != "/" ]; do
      child=$(basename "$parent")
      parent=$(dirname "$parent")
    done

    while :; do
      event=$(inotifywait -e create "$parent" | cut -d' ' -f3)
      if [ "$event" = "$child" ]; then
        watch_directory "$dir"
        return
      fi
    done
  fi
}

################################################################################
main() {
  local width
  local dir

  if [ -n "$option_name_for" ]; then
    width=$(calc_image_width)
    gen_cache_name "$option_name_for" "$width"
    exit
  fi

  dir="$option_images"
  cache_directory "$dir"
  watch_directory "$dir"
}

################################################################################
while getopts "b:c:d:hi:" o; do
  case "${o}" in
  b)
    option_default_image=$OPTARG
    ;;

  c)
    option_cache=$OPTARG
    ;;

  d)
    option_images=$OPTARG
    ;;

  h)
    usage
    exit
    ;;

  i)
    option_name_for=$OPTARG
    ;;

  *)
    exit 1
    ;;
  esac
done

shift $((OPTIND - 1))
main "$@"
